{"/home/travis/build/npmtest/node-npmtest-react-native-viewpager/test.js":"/* istanbul instrument in package npmtest_react_native_viewpager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/lib.npmtest_react_native_viewpager.js":"/* istanbul instrument in package npmtest_react_native_viewpager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_viewpager = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_viewpager = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-viewpager && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_viewpager */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_viewpager\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_viewpager.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_viewpager.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_viewpager.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_viewpager.__dirname + '/lib.npmtest_react_native_viewpager.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/node_modules/react-native-viewpager/ViewPager.js":"'use strict';\n\nvar React = require('react');\nvar { PropTypes } = React;\n\nvar ReactNative = require('react-native');\nvar {\n  Dimensions,\n  Text,\n  View,\n  TouchableOpacity,\n  PanResponder,\n  Animated,\n  StyleSheet,\n} = ReactNative;\n\nvar StaticRenderer = require('react-native/Libraries/Components/StaticRenderer');\nvar TimerMixin = require('react-timer-mixin');\n\nvar DefaultViewPageIndicator = require('./DefaultViewPageIndicator');\nvar deviceWidth = Dimensions.get('window').width;\nvar ViewPagerDataSource = require('./ViewPagerDataSource');\n\nvar ViewPager = React.createClass({\n  mixins: [TimerMixin],\n\n  statics: {\n    DataSource: ViewPagerDataSource,\n  },\n\n  propTypes: {\n    ...View.propTypes,\n    dataSource: PropTypes.instanceOf(ViewPagerDataSource).isRequired,\n    renderPage: PropTypes.func.isRequired,\n    onChangePage: PropTypes.func,\n    renderPageIndicator: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.bool\n    ]),\n    isLoop: PropTypes.bool,\n    locked: PropTypes.bool,\n    autoPlay: PropTypes.bool,\n    animation: PropTypes.func,\n    initialPage: PropTypes.number,\n  },\n\n  fling: false,\n\n  getDefaultProps() {\n    return {\n      isLoop: false,\n      locked: false,\n      animation: function(animate, toValue, gs) {\n        return Animated.spring(animate,\n          {\n            toValue: toValue,\n            friction: 10,\n            tension: 50,\n          })\n      },\n    }\n  },\n\n  getInitialState() {\n    return {\n      currentPage: 0,\n      viewWidth: 0,\n      scrollValue: new Animated.Value(0)\n    };\n  },\n\n  componentWillMount() {\n    this.childIndex = 0;\n\n    var release = (e, gestureState) => {\n      var relativeGestureDistance = gestureState.dx / deviceWidth,\n          //lastPageIndex = this.props.children.length - 1,\n          vx = gestureState.vx;\n\n      var step = 0;\n      if (relativeGestureDistance < -0.5 || (relativeGestureDistance < 0 && vx <= -1e-6)) {\n        step = 1;\n      } else if (relativeGestureDistance > 0.5 || (relativeGestureDistance > 0 && vx >= 1e-6)) {\n        step = -1;\n      }\n\n      this.props.hasTouch && this.props.hasTouch(false);\n\n      this.movePage(step, gestureState);\n    }\n\n    this._panResponder = PanResponder.create({\n      // Claim responder if it's a horizontal pan\n      onMoveShouldSetPanResponder: (e, gestureState) => {\n        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\n          if (/* (gestureState.moveX <= this.props.edgeHitWidth ||\n              gestureState.moveX >= deviceWidth - this.props.edgeHitWidth) && */\n                this.props.locked !== true && !this.fling) {\n            this.props.hasTouch && this.props.hasTouch(true);\n            return true;\n          }\n        }\n      },\n\n      // Touch is released, scroll to the one that you're closest to\n      onPanResponderRelease: release,\n      onPanResponderTerminate: release,\n\n      // Dragging, move the view with the touch\n      onPanResponderMove: (e, gestureState) => {\n        var dx = gestureState.dx;\n        var offsetX = -dx / this.state.viewWidth + this.childIndex;\n        this.state.scrollValue.setValue(offsetX);\n      },\n    });\n\n    if (this.props.isLoop) {\n      this.childIndex = 1;\n      this.state.scrollValue.setValue(1);\n    }\n    if(this.props.initialPage){\n      var initialPage = Number(this.props.initialPage);\n      if (initialPage > 0) {\n        this.goToPage(initialPage, false);\n      }\n    }\n  },\n\n  componentDidMount() {\n    if (this.props.autoPlay) {\n      this._startAutoPlay();\n    }\n  },\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.autoPlay) {\n      this._startAutoPlay();\n    } else {\n      if (this._autoPlayer) {\n        this.clearInterval(this._autoPlayer);\n        this._autoPlayer = null;\n      }\n    }\n\n    if (nextProps.dataSource) {\n      var maxPage = nextProps.dataSource.getPageCount() - 1;\n      var constrainedPage = Math.max(0, Math.min(this.state.currentPage, maxPage));\n      this.setState({\n        currentPage: constrainedPage,\n      });\n\n      if (!nextProps.isLoop) {\n        this.state.scrollValue.setValue(constrainedPage > 0 ? 1 : 0);\n      }\n\n      this.childIndex = Math.min(this.childIndex, constrainedPage);\n      this.fling = false;\n    }\n\n  },\n\n  _startAutoPlay() {\n    if (!this._autoPlayer) {\n      this._autoPlayer = this.setInterval(\n        () => {this.movePage(1);},\n        5000\n      );\n    }\n  },\n\n  goToPage(pageNumber, animate = true) {\n\n    var pageCount = this.props.dataSource.getPageCount();\n    if (pageNumber < 0 || pageNumber >= pageCount) {\n      console.error('Invalid page number: ', pageNumber);\n      return\n    }\n\n    var step = pageNumber - this.state.currentPage;\n    this.movePage(step, null, animate);\n  },\n\n  movePage(step, gs, animate = true) {\n    var pageCount = this.props.dataSource.getPageCount();\n    var pageNumber = this.state.currentPage + step;\n    if (this.props.isLoop) {\n      pageNumber = pageCount == 0 ? pageNumber = 0 : ((pageNumber + pageCount) % pageCount);\n    } else {\n      pageNumber = Math.min(Math.max(0, pageNumber), pageCount - 1);\n    }\n\n    const moved = pageNumber !== this.state.currentPage;\n    const scrollStep = (moved ? step : 0) + this.childIndex;\n    const nextChildIdx = (pageNumber > 0 || this.props.isLoop) ? 1 : 0;\n\n    const postChange = () => {\n      this.fling = false;\n      this.childIndex = nextChildIdx;\n      this.state.scrollValue.setValue(nextChildIdx);\n      this.setState({\n        currentPage: pageNumber,\n      });\n    };\n\n    if (animate) {\n      this.fling = true;\n      this.props.animation(this.state.scrollValue, scrollStep, gs)\n        .start((event) => {\n          if (event.finished) {\n            postChange();\n          }\n          moved && this.props.onChangePage && this.props.onChangePage(pageNumber);\n        });\n    } else {\n      postChange();\n      moved && this.props.onChangePage && this.props.onChangePage(pageNumber);\n    }\n  },\n\n  getCurrentPage() {\n    return this.state.currentPage;\n  },\n\n  renderPageIndicator(props) {\n    if (this.props.renderPageIndicator === false) {\n      return null;\n    } else if (this.props.renderPageIndicator) {\n      return React.cloneElement(this.props.renderPageIndicator(), props);\n    } else {\n      return (\n        <View style={styles.indicators}>\n          <DefaultViewPageIndicator {...props} />\n        </View>\n      );\n    }\n  },\n\n  _getPage(pageIdx: number, loop:boolean = false ) {\n    var dataSource = this.props.dataSource;\n    var pageID = dataSource.pageIdentities[pageIdx];\n    return (\n      <StaticRenderer\n        key={'p_' + pageID + (loop ? '_1' : '')}\n        shouldUpdate={true}\n        render={this.props.renderPage.bind(\n          null,\n          dataSource.getPageData(pageIdx),\n          pageID,\n          this.state.currentPage\n        )}\n      />\n    );\n  },\n\n  render() {\n    var dataSource = this.props.dataSource;\n    var pageIDs = dataSource.pageIdentities;\n\n    var bodyComponents = [];\n\n    var pagesNum = 0;\n    var hasLeft = false;\n    var viewWidth = this.state.viewWidth;\n\n    if(pageIDs.length > 0 && viewWidth > 0) {\n      // left page\n      if (this.state.currentPage > 0) {\n        bodyComponents.push(this._getPage(this.state.currentPage - 1));\n        pagesNum++;\n        hasLeft = true;\n      } else if (this.state.currentPage == 0 && this.props.isLoop) {\n        bodyComponents.push(this._getPage(pageIDs.length - 1, true));\n        pagesNum++;\n        hasLeft = true;\n      }\n\n      // center page\n      bodyComponents.push(this._getPage(this.state.currentPage));\n      pagesNum++;\n\n      // right page\n      if (this.state.currentPage < pageIDs.length - 1) {\n        bodyComponents.push(this._getPage(this.state.currentPage + 1));\n        pagesNum++;\n      } else if (this.state.currentPage == pageIDs.length - 1 && this.props.isLoop) {\n        bodyComponents.push(this._getPage(0, true));\n        pagesNum++;\n      }\n    }\n\n    var sceneContainerStyle = {\n      width: viewWidth * pagesNum,\n      flex: 1,\n      flexDirection: 'row'\n    };\n\n    // this.childIndex = hasLeft ? 1 : 0;\n    // this.state.scrollValue.setValue(this.childIndex);\n    var translateX = this.state.scrollValue.interpolate({\n      inputRange: [0, 1], outputRange: [0, -viewWidth]\n    });\n\n    return (\n      <View style={{flex: 1}}\n        onLayout={(event) => {\n            // console.log('ViewPager.onLayout()');\n            var viewWidth = event.nativeEvent.layout.width;\n            if (!viewWidth || this.state.viewWidth === viewWidth) {\n              return;\n            }\n            this.setState({\n              currentPage: this.state.currentPage,\n              viewWidth: viewWidth,\n            });\n          }}\n        >\n\n        <Animated.View style={[sceneContainerStyle, {transform: [{translateX}]}]}\n          {...this._panResponder.panHandlers}>\n          {bodyComponents}\n        </Animated.View>\n\n        {this.renderPageIndicator({goToPage: this.goToPage,\n                            pageCount: pageIDs.length,\n                            activePage: this.state.currentPage,\n                            scrollValue: this.state.scrollValue,\n                            scrollOffset: this.childIndex,\n                          })}\n      </View>\n    );\n  }\n});\n\nvar styles = StyleSheet.create({\n  indicators: {\n    flex: 1,\n    alignItems: 'center',\n    position: 'absolute',\n    bottom: 10,\n    left: 0,\n    right: 0,\n    backgroundColor: 'transparent',\n  },\n});\n\nmodule.exports = ViewPager;\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/node_modules/react-native-viewpager/DefaultViewPageIndicator.js":"'use strict';\n\nvar React = require('react');\nvar ReactNative = require('react-native');\nvar {\n  Dimensions,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  Animated,\n} = ReactNative;\n\nvar deviceWidth = Dimensions.get('window').width;\nvar DOT_SIZE = 6;\nvar DOT_SAPCE = 4;\n\nvar styles = StyleSheet.create({\n  tab: {\n    alignItems: 'center',\n  },\n\n  tabs: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n  dot: {\n    width: DOT_SIZE,\n    height: DOT_SIZE,\n    borderRadius: DOT_SIZE / 2,\n    backgroundColor: '#E0E1E2',\n    marginLeft: DOT_SAPCE,\n    marginRight: DOT_SAPCE,\n  },\n\n  curDot: {\n    position: 'absolute',\n    width: DOT_SIZE,\n    height: DOT_SIZE,\n    borderRadius: DOT_SIZE / 2,\n    backgroundColor: '#80ACD0',\n    margin: DOT_SAPCE,\n    bottom: 0,\n  },\n});\n\nvar DefaultViewPageIndicator = React.createClass({\n  propTypes: {\n    goToPage: React.PropTypes.func,\n    activePage: React.PropTypes.number,\n    pageCount: React.PropTypes.number\n  },\n\n  getInitialState() {\n    return {\n      viewWidth: 0,\n    };\n  },\n\n  renderIndicator(page) {\n    //var isTabActive = this.props.activePage === page;\n    return (\n      <TouchableOpacity style={styles.tab} key={'idc_' + page} onPress={() => this.props.goToPage(page)}>\n        <View style={styles.dot} />\n      </TouchableOpacity>\n    );\n  },\n\n  render() {\n    var pageCount = this.props.pageCount;\n    var itemWidth = DOT_SIZE + (DOT_SAPCE * 2);\n    var offset = (this.state.viewWidth - itemWidth * pageCount) / 2 + itemWidth * this.props.activePage;\n\n    //var left = offset;\n    var offsetX = itemWidth * (this.props.activePage - this.props.scrollOffset);\n    var left = this.props.scrollValue.interpolate({\n      inputRange: [0, 1], outputRange: [offsetX, offsetX + itemWidth]\n    })\n\n    var indicators = [];\n    for (var i = 0; i < pageCount; i++) {\n      indicators.push(this.renderIndicator(i))\n    }\n\n    return (\n      <View style={styles.tabs}\n        onLayout={(event) => {\n            var viewWidth = event.nativeEvent.layout.width;\n            if (!viewWidth || this.state.viewWidth === viewWidth) {\n              return;\n            }\n            this.setState({\n              viewWidth: viewWidth,\n            });\n          }}>\n        {indicators}\n        <Animated.View style={[styles.curDot, {left}]} />\n      </View>\n    );\n  },\n});\n\nmodule.exports = DefaultViewPageIndicator;\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/node_modules/react-native-viewpager/ViewPagerDataSource.js":"'use strict';\n\n//var warning = require('warning');\n\nfunction defaultGetPageData(\n  dataBlob: any,\n  pageID: number | string,\n): any {\n  return dataBlob[pageID];\n}\n\ntype differType = (data1: any, data2: any) => bool;\n\ntype ParamType = {\n  pageHasChanged: differType;\n  getPageData: ?typeof defaultGetPageData;\n}\n\nclass ViewPagerDataSource {\n\n  constructor(params: ParamType) {\n    this._getPageData = params.getPageData || defaultGetPageData;\n    this._pageHasChanged = params.pageHasChanged;\n\n    this.pageIdentities = [];\n  }\n\n  cloneWithPages(\n      dataBlob: any,\n      pageIdentities: ?Array<string>,\n  ): ViewPagerDataSource {\n\n    var newSource = new ViewPagerDataSource({\n      getPageData: this._getPageData,\n      pageHasChanged: this._pageHasChanged,\n    });\n\n    newSource._dataBlob = dataBlob;\n\n    if (pageIdentities) {\n      newSource.pageIdentities = pageIdentities;\n    } else {\n      newSource.pageIdentities = Object.keys(dataBlob);\n    }\n\n    newSource._cachedPageCount = newSource.pageIdentities.length;\n    newSource._calculateDirtyPages(\n      this._dataBlob,\n      this.pageIdentities\n    );\n    return newSource;\n  }\n\n  getPageCount(): number {\n    return this._cachedPageCount;\n  }\n\n  /**\n   * Returns if the row is dirtied and needs to be rerendered\n   */\n  pageShouldUpdate(pageIndex: number): bool {\n    var needsUpdate = this._dirtyPages[pageIndex];\n    //    warning(needsUpdate !== undefined,\n    //  'missing dirtyBit for section, page: ' + pageIndex);\n    return needsUpdate;\n  }\n\n  /**\n   * Gets the data required to render the page\n   */\n  getPageData(pageIndex: number): any {\n    if (!this.getPageData) {\n      return null;\n    }\n    var pageID = this.pageIdentities[pageIndex];\n    //    warning(pageID !== undefined,\n    //      'renderPage called on invalid section: ' + pageID);\n    return this._getPageData(this._dataBlob,pageID);\n  }\n\n  /**\n   * Private members and methods.\n   */\n\n  _getPageData: typeof defaultGetPageData;\n  _pageHasChanged: differType;\n\n  _dataBlob: any;\n  _dirtyPages: Array<bool>;\n  _cachedRowCount: number;\n\n  pageIdentities: Array<string>;\n\n  _calculateDirtyPages(\n    prevDataBlob: any,\n    prevPageIDs: Array<string>,\n  ): void {\n    // construct a hashmap of the existing (old) id arrays\n    var prevPagesHash = keyedDictionaryFromArray(prevPageIDs);\n    this._dirtyPages = [];\n\n    var dirty;\n    for (var sIndex = 0; sIndex < this.pageIdentities.length; sIndex++) {\n      var pageID = this.pageIdentities[sIndex];\n      dirty = !prevPagesHash[pageID];\n      var pageHasChanged = this._pageHasChanged\n      if (!dirty && pageHasChanged) {\n        dirty = pageHasChanged(\n          this._getPageData(prevDataBlob, pageID),\n          this._getPageData(this._dataBlob, pageID)\n        );\n      }\n      this._dirtyPages.push(!!dirty);\n    }\n  }\n\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (arr.length === 0) {\n    return {};\n  }\n  var result = {};\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    //    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\n\nmodule.exports = ViewPagerDataSource;\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/node_modules/react-native-viewpager/Sample/BottomScreen.js":"'use strict';\n\nimport React from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  Dimensions,\n  ToastAndroid,\n  Platform,\n  AlertIOS,\n} from 'react-native';\n\nvar ViewPager = require('react-native-viewpager');\n//var ViewPager = require('./ViewPager');\nvar deviceWidth = Dimensions.get('window').width;\n\nvar PAGES = [\n  'Page 0',\n  'Page 1',\n  'Page 2',\n  'Page 3',\n  'Page 4',\n];\n\nfunction notifyMessage(msg: string) {\n  if (Platform.OS === 'android') {\n    ToastAndroid.show(msg, ToastAndroid.SHORT)\n  } else {\n    AlertIOS.alert(msg);\n  }\n}\n\nvar ImagesScreen = React.createClass({\n  getInitialState: function() {\n    var dataSource = new ViewPager.DataSource({\n      pageHasChanged: (p1, p2) => p1 !== p2,\n    });\n\n    return {\n      dataSource: dataSource.cloneWithPages(PAGES),\n    };\n  },\n\n  render: function() {\n    return (\n      <ViewPager\n        style={this.props.style}\n        dataSource={this.state.dataSource}\n        renderPage={this._renderPage}\n        onChangePage={this._onChangePage}\n        isLoop={false}\n        autoPlay={false}/>\n    );\n  },\n\n  _renderPage: function(\n    data: Object,\n    pageID: number | string,) {\n    return (\n      <View style={styles.page}>\n        <Text style={styles.text}>{data}</Text>\n      </View>\n    );\n  },\n\n  _onChangePage: function(\n    page: number | string\n  ) {\n    notifyMessage('Current page: ' + page);\n  },\n\n});\n\nvar styles = StyleSheet.create({\n  page: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },\n  text: {\n    fontSize: 20,\n    textAlign: 'center',\n  },\n});\n\nmodule.exports = ImagesScreen;\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/node_modules/react-native-viewpager/Sample/index.android.js":"'use strict';\n\nvar React = require('react-native');\nvar {\n  AppRegistry,\n} = React;\n\nvar MainScreen = require('./MainScreen');\n\nAppRegistry.registerComponent('RNViewPager', () => MainScreen);\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/node_modules/react-native-viewpager/Sample/index.ios.js":"'use strict';\n\nvar React = require('react-native');\nvar {\n  AppRegistry,\n} = React;\n\nvar MainScreen = require('./MainScreen');\n\nAppRegistry.registerComponent('RNViewPager', () => MainScreen);\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/node_modules/react-native-viewpager/Sample/MainScreen.js":"'use strict';\n\nimport React from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nvar TopScreen = require('./TopScreen');\nvar BottomScreen = require('./BottomScreen');\n\nvar MainScreen = React.createClass({\n\n  render: function() {\n    return (\n      <View style={styles.container}>\n        <TopScreen style={styles.viewpager}/>\n        <BottomScreen style={styles.viewpager}/>\n      </View>\n    );\n  },\n\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n  },\n  viewpager: {\n    flex: 1,\n  },\n});\n\nmodule.exports = MainScreen;\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/node_modules/react-native-viewpager/Sample/SimpleScreen.js":"'use strict';\n\nvar React = require('react-native');\nvar {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  Dimensions,\n  Image,\n  TouchableHighlight,\n} = React;\n\nvar ViewPager = require('react-native-viewpager');\n//var ViewPager = require('./ViewPager');\nvar deviceWidth = Dimensions.get('window').width;\n\nvar IMGS = [\n  'https://images.unsplash.com/photo-1441742917377-57f78ee0e582?h=1024',\n  'https://images.unsplash.com/photo-1441716844725-09cedc13a4e7?h=1024',\n  'https://images.unsplash.com/photo-1441448770220-76743f9e6af6?h=1024',\n  'https://images.unsplash.com/photo-1441260038675-7329ab4cc264?h=1024',\n  'https://images.unsplash.com/photo-1441126270775-739547c8680c?h=1024',\n  'https://images.unsplash.com/photo-1440964829947-ca3277bd37f8?h=1024',\n  'https://images.unsplash.com/photo-1440847899694-90043f91c7f9?h=1024'\n];\n\nvar count = 0;\n\nvar SimpleScreen = React.createClass({\n  getInitialState: function() {\n    var dataSource = new ViewPager.DataSource({\n      pageHasChanged: (p1, p2) => p1 !== p2,\n    });\n\n    return {\n      dataSource: dataSource.cloneWithPages(IMGS),\n      page: 0\n    };\n  },\n\n  render: function() {\n    return (\n      <View style={styles.container}>\n        <ViewPager\n          ref={(viewpager) => {this.viewpager = viewpager}}\n          style={this.props.style}\n          dataSource={this.state.dataSource}\n          renderPage={this._renderPage}\n          isLoop={false}\n          autoPlay={false}/>\n\n        <TouchableHighlight style={styles.button} onPress={() => {\n            this.viewpager.goToPage(count + 1);\n            count = count + 1;\n          }}>\n          <Text>Click</Text>\n        </TouchableHighlight>\n      </View>\n\n    );\n  },\n\n  _renderPage: function(\n    data: Object,\n    pageID: number | string,) {\n    return (\n      <Image\n        source={{uri: data}}\n        style={styles.page} />\n    );\n  },\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  page: {\n    width: deviceWidth,\n  },\n  button: {\n    padding: 10,\n  },\n});\n\nmodule.exports = SimpleScreen;\n","/home/travis/build/npmtest/node-npmtest-react-native-viewpager/node_modules/react-native-viewpager/Sample/TopScreen.js":"'use strict';\n\nimport React from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  Dimensions,\n  Image,\n} from 'react-native';\n\nimport ViewPager from 'react-native-viewpager';\n//var ViewPager = require('./ViewPager');\nvar deviceWidth = Dimensions.get('window').width;\n\nvar IMGS = [\n  'https://images.unsplash.com/photo-1441742917377-57f78ee0e582?h=1024',\n  'https://images.unsplash.com/photo-1441716844725-09cedc13a4e7?h=1024',\n  'https://images.unsplash.com/photo-1441448770220-76743f9e6af6?h=1024',\n  'https://images.unsplash.com/photo-1441260038675-7329ab4cc264?h=1024',\n  'https://images.unsplash.com/photo-1441126270775-739547c8680c?h=1024',\n  'https://images.unsplash.com/photo-1440964829947-ca3277bd37f8?h=1024',\n  'https://images.unsplash.com/photo-1440847899694-90043f91c7f9?h=1024'\n];\n\nvar TopScreen = React.createClass({\n  getInitialState: function() {\n    var dataSource = new ViewPager.DataSource({\n      pageHasChanged: (p1, p2) => p1 !== p2,\n    });\n\n    return {\n      dataSource: dataSource.cloneWithPages(IMGS),\n    };\n  },\n\n  render: function() {\n    return (\n      <ViewPager\n        style={this.props.style}\n        dataSource={this.state.dataSource}\n        renderPage={this._renderPage}\n        isLoop={true}\n        autoPlay={true}/>\n    );\n  },\n\n  _renderPage: function(\n    data: Object,\n    pageID: number | string,) {\n    return (\n      <Image\n        source={{uri: data}}\n        style={styles.page} />\n    );\n  },\n});\n\nvar styles = StyleSheet.create({\n  page: {\n    width: deviceWidth,\n  },\n});\n\nmodule.exports = TopScreen;\n"}